(* A complete program is a sequence of declarations *)
Program              = { Declaration } ;

Declaration          = ConstantDeclaration
                     | VariableDeclaration
                     | FunctionDeclaration
                     | ClassDeclaration
                     | EnumDeclaration ;

ConstantDeclaration  = "let" Identifier ":" PrimitiveType "=" Expression ";" ;

VariableDeclaration  = "var" Identifier ":" Type "=" Expression ";" ;

FunctionDeclaration  = "fun" Identifier "(" [ ParameterList ] ")" [ ":" Type ] Block ;

ParameterList        = Parameter { "," Parameter } ;
Parameter            = Identifier ":" [ "const" ] Type ;

ClassDeclaration     = "class" Identifier ClassBlock ;

EnumDeclaration      = "enum" Identifier EnumBlock ;

Type                 = PrimitiveType
                     | Identifier
                     | ArrayType ;

PrimitiveType        = "int" | "uint" | "float" | "bool" | "string" ;

ArrayType            = "[" PrimitiveType | Identifier "]" ;

Block                = "{" { Declaration | Statement } "}" ;

ClassBlock           = "{" { Declaration } "}" ;

EnumBlock            = "{" EnumMemberList "}" ;
EnumMemberList       = Identifier { "," Identifier } [ "," ] ;

Statement            = Block
                     | ExpressionStatement ";"
                     | IfStatement
                     | ForStatement
                     | WhileStatement
                     | BreakStatement ";"
                     | ContinueStatement ";"
                     | ReturnStatement ";"
                     | SwitchStatement ;

ExpressionStatement  = AssignmentExpression
                     | FunctionCall ;

IfStatement          = "if" "(" Expression ")" Block [ "else" Block ] ;

ForStatement         = "for" "(" VariableDeclaration ";" Expression ";" Expression ")" Block ;

WhileStatement       = "while" "(" Expression ")" Block ;

SwitchStatement      = "switch" "(" Expression ")" SwitchBlock ;
SwitchBlock          = "{" { CaseClause } "}" ;
CaseClause           = Case | Default ;
Case                 = "case" Expression ":" Block ;
Default              = "default" ":" Block ;

BreakStatement       = "break" ;
ContinueStatement    = "continue" ;
ReturnStatement      = "return" [ Expression ] ;

(* For now, bitwise and ternary operators are left out but may be added later. *)
Expression           = AssignmentExpression ;

AssignmentExpression = LeftHandSideExpression "=" AssignmentExpression
                     | LogicalOrExpression ;

LeftHandSideExpression = PrimaryExpression ;

LogicalOrExpression  = LogicalAndExpression { "||" LogicalAndExpression } ;

LogicalAndExpression = EqualityExpression { "&&" EqualityExpression } ;

EqualityExpression   = RelationalExpression { ( "==" | "!=" ) RelationalExpression } ;

RelationalExpression = AdditiveExpression [ ( "<" | ">" | "<=" | ">=" ) AdditiveExpression ] ;

AdditiveExpression   = MultiplicativeExpression { ( "+" | "-" ) MultiplicativeExpression } ;

MultiplicativeExpression = UnaryExpression { ( "*" | "/" | "%" ) UnaryExpression } ;

UnaryExpression      = [ ( "-" | "!" ) ] PrimaryExpression ;

PrimaryExpression    = PrimaryPrefix { PostfixOperator } ;

PrimaryPrefix        = Identifier
                     | Literal
                     | ArrayLiteral
                     | "(" Expression ")"
                     | FunctionCall
                     | ObjectInstantiation ;

(* Function calls can only follow member accesses, not array accesses *)
PostfixOperator      = MemberAccess
                     | ArrayAccess
                     | ( MemberAccess | FunctionCall ) FunctionCall ;

MemberAccess         = "." Identifier ;
ArrayAccess          = "[" Expression "]" ;

FunctionCall         = "(" [ ArgumentList ] ")" ;

(* A function call uses the same syntax as object instantiation.
   Semantic analysis will distinguish them by looking up Identifier in the symbol table. *)
ArgumentList         = Expression { "," Expression } ;

(* In our design, object instantiation follows a function-call-like syntax *)
ObjectInstantiation  = Identifier "(" [ ArgumentList ] ")" ;

Literal              = IntegerLiteral | FloatLiteral | BoolLiteral | StringLiteral ;

IntegerLiteral       = Digit { Digit } ;
FloatLiteral         = Digit { Digit } "." Digit { Digit } ;
BoolLiteral          = "true" | "false" ;

ArrayLiteral         = "[" [ ExpressionList ] "]" ;
ExpressionList       = Expression { "," Expression } ;

(* Simple string literal enclosed in double quotes.
   Note: Escape sequences for special characters, if desired, will be handled in the lexer. *)
StringLiteral        = "\"" { AnyCharExceptQuoteOrNewline } "\"" ;

(* Identifier: a letter followed by letters, digits, or underscores *)
Identifier           = Letter { Letter | Digit | "_" } ;

(* Lexical terminals *)
Digit                = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
Letter               = "A" … "Z" | "a" … "z" ;

(* The terminal AnyCharExceptQuoteOrNewline
   represents any character except a double quote or a newline.
   Handling of escape sequences (if any) is delegated to the lexer. *)

(* 
   Whitespace and single-line comments (e.g., starting with "//") are handled by the lexer 
   and are not included in this grammar.
*)
