// vim: syntax=Swift
// Constant and Variable Declarations
let pi: float = 3.14159;
var score: uint = 100;
var negative: int = -42;  // Testing unary minus for negative literal

// Function Declaration: simple arithmetic and return
fun Add(a: int, b: int): int
{
    var sum: int = a + b;
    return sum;
}

// Function Declaration: string concatenation and comment handling
fun Greet(name: string): string
{
    // This is a single-line comment
    var message: string = "Hello, " + name + "!";
    return message;
}

// Class Declaration: properties, constructor, and a method
class Person
{
    var name: string = "";
    var age: int = 0;

    fun Person(newName: string, newAge: int)
    {
        name = newName;
        age = newAge;
    }

    fun Describe(): string
    {
        return name + " is " + age + " years old.";
    }
}

// Enum Declaration: defining fixed set of values
enum Direction
{
    North,
    East,
    South,
    West,
}

// Function Declaration: testing loops and control flow
fun TestLoops()
{
    for (var i: uint = 0; i < 10; i = i + 1)
    {
        if (i == 3)
        {
            continue;
        }
        if (i == 7)
        {
            break;
        }
    }

    var count: uint = 5;
    while (count > 0)
    {
        count = count - 1;
    }
}

// Array Literals & Nested Arrays
var numbers: [int] = [1, 2, 3, 4, 5];
var emptyArr: [float] = [];       // Empty array literal
// var nestedArr: [[int]] = [[1,2], [3,4]];

// Function Declaration: expressions involving all operators
fun TestExpressions()
{
    var a: int = 10;
    var b: int = 20;
    // Testing mixed boolean and relational operators
    var result: bool = (a == b) || (a != b) && (a < b);
    // Testing arithmetic operators with explicit grouping and unary minus
    var calc: float = -a * 2.5 + (b / 5) - 3.0;
}

 // No fallthrough in Mano. There must a statement after the case, ie.: a case cannot be empty.
fun TestSwitch(dir: Direction)
{
    switch(dir)
    {
        case Direction.North:
        {
            TestExpressions();
        }
        case Direction.East:
        {
        }
        case Direction.South:
        {
            break;
        }
        case Direction.West:
        {
            TestExpressions();           
        }
        default:
        {
        }
    }
}

fun TestConstParameters(name: const string, age: const uint)
{
    test.numbers[3] = 10;
}

// Main function: object instantiation, function calls, and printing result
fun Main()
{
    var p: Person = Person("Alice", 30);
    var greeting: string = Greet("Bob");
    Print(greeting);
    Print(p.Describe());
}
